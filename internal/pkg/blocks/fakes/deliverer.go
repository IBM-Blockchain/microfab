// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM-Blockchain/microfab/internal/pkg/blocks"
	"github.com/IBM-Blockchain/microfab/internal/pkg/identity"
	"github.com/hyperledger/fabric-protos-go/common"
)

type Deliverer struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ConnectStub        func(string, *identity.Identity) error
	connectMutex       sync.RWMutex
	connectArgsForCall []struct {
		arg1 string
		arg2 *identity.Identity
	}
	connectReturns struct {
		result1 error
	}
	connectReturnsOnCall map[int]struct {
		result1 error
	}
	ConnectedStub        func() bool
	connectedMutex       sync.RWMutex
	connectedArgsForCall []struct {
	}
	connectedReturns struct {
		result1 bool
	}
	connectedReturnsOnCall map[int]struct {
		result1 bool
	}
	ConnectionIdentityStub        func() *identity.Identity
	connectionIdentityMutex       sync.RWMutex
	connectionIdentityArgsForCall []struct {
	}
	connectionIdentityReturns struct {
		result1 *identity.Identity
	}
	connectionIdentityReturnsOnCall map[int]struct {
		result1 *identity.Identity
	}
	ConnectionMSPIDStub        func() string
	connectionMSPIDMutex       sync.RWMutex
	connectionMSPIDArgsForCall []struct {
	}
	connectionMSPIDReturns struct {
		result1 string
	}
	connectionMSPIDReturnsOnCall map[int]struct {
		result1 string
	}
	DeliverStub        func(*common.Envelope, blocks.DeliverCallback) error
	deliverMutex       sync.RWMutex
	deliverArgsForCall []struct {
		arg1 *common.Envelope
		arg2 blocks.DeliverCallback
	}
	deliverReturns struct {
		result1 error
	}
	deliverReturnsOnCall map[int]struct {
		result1 error
	}
	HostStub        func() string
	hostMutex       sync.RWMutex
	hostArgsForCall []struct {
	}
	hostReturns struct {
		result1 string
	}
	hostReturnsOnCall map[int]struct {
		result1 string
	}
	HostnameStub        func() string
	hostnameMutex       sync.RWMutex
	hostnameArgsForCall []struct {
	}
	hostnameReturns struct {
		result1 string
	}
	hostnameReturnsOnCall map[int]struct {
		result1 string
	}
	PortStub        func() int32
	portMutex       sync.RWMutex
	portArgsForCall []struct {
	}
	portReturns struct {
		result1 int32
	}
	portReturnsOnCall map[int]struct {
		result1 int32
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Deliverer) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *Deliverer) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *Deliverer) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *Deliverer) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *Deliverer) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Deliverer) Connect(arg1 string, arg2 *identity.Identity) error {
	fake.connectMutex.Lock()
	ret, specificReturn := fake.connectReturnsOnCall[len(fake.connectArgsForCall)]
	fake.connectArgsForCall = append(fake.connectArgsForCall, struct {
		arg1 string
		arg2 *identity.Identity
	}{arg1, arg2})
	fake.recordInvocation("Connect", []interface{}{arg1, arg2})
	fake.connectMutex.Unlock()
	if fake.ConnectStub != nil {
		return fake.ConnectStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.connectReturns
	return fakeReturns.result1
}

func (fake *Deliverer) ConnectCallCount() int {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return len(fake.connectArgsForCall)
}

func (fake *Deliverer) ConnectCalls(stub func(string, *identity.Identity) error) {
	fake.connectMutex.Lock()
	defer fake.connectMutex.Unlock()
	fake.ConnectStub = stub
}

func (fake *Deliverer) ConnectArgsForCall(i int) (string, *identity.Identity) {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	argsForCall := fake.connectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Deliverer) ConnectReturns(result1 error) {
	fake.connectMutex.Lock()
	defer fake.connectMutex.Unlock()
	fake.ConnectStub = nil
	fake.connectReturns = struct {
		result1 error
	}{result1}
}

func (fake *Deliverer) ConnectReturnsOnCall(i int, result1 error) {
	fake.connectMutex.Lock()
	defer fake.connectMutex.Unlock()
	fake.ConnectStub = nil
	if fake.connectReturnsOnCall == nil {
		fake.connectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.connectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Deliverer) Connected() bool {
	fake.connectedMutex.Lock()
	ret, specificReturn := fake.connectedReturnsOnCall[len(fake.connectedArgsForCall)]
	fake.connectedArgsForCall = append(fake.connectedArgsForCall, struct {
	}{})
	fake.recordInvocation("Connected", []interface{}{})
	fake.connectedMutex.Unlock()
	if fake.ConnectedStub != nil {
		return fake.ConnectedStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.connectedReturns
	return fakeReturns.result1
}

func (fake *Deliverer) ConnectedCallCount() int {
	fake.connectedMutex.RLock()
	defer fake.connectedMutex.RUnlock()
	return len(fake.connectedArgsForCall)
}

func (fake *Deliverer) ConnectedCalls(stub func() bool) {
	fake.connectedMutex.Lock()
	defer fake.connectedMutex.Unlock()
	fake.ConnectedStub = stub
}

func (fake *Deliverer) ConnectedReturns(result1 bool) {
	fake.connectedMutex.Lock()
	defer fake.connectedMutex.Unlock()
	fake.ConnectedStub = nil
	fake.connectedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Deliverer) ConnectedReturnsOnCall(i int, result1 bool) {
	fake.connectedMutex.Lock()
	defer fake.connectedMutex.Unlock()
	fake.ConnectedStub = nil
	if fake.connectedReturnsOnCall == nil {
		fake.connectedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.connectedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Deliverer) ConnectionIdentity() *identity.Identity {
	fake.connectionIdentityMutex.Lock()
	ret, specificReturn := fake.connectionIdentityReturnsOnCall[len(fake.connectionIdentityArgsForCall)]
	fake.connectionIdentityArgsForCall = append(fake.connectionIdentityArgsForCall, struct {
	}{})
	fake.recordInvocation("ConnectionIdentity", []interface{}{})
	fake.connectionIdentityMutex.Unlock()
	if fake.ConnectionIdentityStub != nil {
		return fake.ConnectionIdentityStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.connectionIdentityReturns
	return fakeReturns.result1
}

func (fake *Deliverer) ConnectionIdentityCallCount() int {
	fake.connectionIdentityMutex.RLock()
	defer fake.connectionIdentityMutex.RUnlock()
	return len(fake.connectionIdentityArgsForCall)
}

func (fake *Deliverer) ConnectionIdentityCalls(stub func() *identity.Identity) {
	fake.connectionIdentityMutex.Lock()
	defer fake.connectionIdentityMutex.Unlock()
	fake.ConnectionIdentityStub = stub
}

func (fake *Deliverer) ConnectionIdentityReturns(result1 *identity.Identity) {
	fake.connectionIdentityMutex.Lock()
	defer fake.connectionIdentityMutex.Unlock()
	fake.ConnectionIdentityStub = nil
	fake.connectionIdentityReturns = struct {
		result1 *identity.Identity
	}{result1}
}

func (fake *Deliverer) ConnectionIdentityReturnsOnCall(i int, result1 *identity.Identity) {
	fake.connectionIdentityMutex.Lock()
	defer fake.connectionIdentityMutex.Unlock()
	fake.ConnectionIdentityStub = nil
	if fake.connectionIdentityReturnsOnCall == nil {
		fake.connectionIdentityReturnsOnCall = make(map[int]struct {
			result1 *identity.Identity
		})
	}
	fake.connectionIdentityReturnsOnCall[i] = struct {
		result1 *identity.Identity
	}{result1}
}

func (fake *Deliverer) ConnectionMSPID() string {
	fake.connectionMSPIDMutex.Lock()
	ret, specificReturn := fake.connectionMSPIDReturnsOnCall[len(fake.connectionMSPIDArgsForCall)]
	fake.connectionMSPIDArgsForCall = append(fake.connectionMSPIDArgsForCall, struct {
	}{})
	fake.recordInvocation("ConnectionMSPID", []interface{}{})
	fake.connectionMSPIDMutex.Unlock()
	if fake.ConnectionMSPIDStub != nil {
		return fake.ConnectionMSPIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.connectionMSPIDReturns
	return fakeReturns.result1
}

func (fake *Deliverer) ConnectionMSPIDCallCount() int {
	fake.connectionMSPIDMutex.RLock()
	defer fake.connectionMSPIDMutex.RUnlock()
	return len(fake.connectionMSPIDArgsForCall)
}

func (fake *Deliverer) ConnectionMSPIDCalls(stub func() string) {
	fake.connectionMSPIDMutex.Lock()
	defer fake.connectionMSPIDMutex.Unlock()
	fake.ConnectionMSPIDStub = stub
}

func (fake *Deliverer) ConnectionMSPIDReturns(result1 string) {
	fake.connectionMSPIDMutex.Lock()
	defer fake.connectionMSPIDMutex.Unlock()
	fake.ConnectionMSPIDStub = nil
	fake.connectionMSPIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *Deliverer) ConnectionMSPIDReturnsOnCall(i int, result1 string) {
	fake.connectionMSPIDMutex.Lock()
	defer fake.connectionMSPIDMutex.Unlock()
	fake.ConnectionMSPIDStub = nil
	if fake.connectionMSPIDReturnsOnCall == nil {
		fake.connectionMSPIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.connectionMSPIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *Deliverer) Deliver(arg1 *common.Envelope, arg2 blocks.DeliverCallback) error {
	fake.deliverMutex.Lock()
	ret, specificReturn := fake.deliverReturnsOnCall[len(fake.deliverArgsForCall)]
	fake.deliverArgsForCall = append(fake.deliverArgsForCall, struct {
		arg1 *common.Envelope
		arg2 blocks.DeliverCallback
	}{arg1, arg2})
	fake.recordInvocation("Deliver", []interface{}{arg1, arg2})
	fake.deliverMutex.Unlock()
	if fake.DeliverStub != nil {
		return fake.DeliverStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deliverReturns
	return fakeReturns.result1
}

func (fake *Deliverer) DeliverCallCount() int {
	fake.deliverMutex.RLock()
	defer fake.deliverMutex.RUnlock()
	return len(fake.deliverArgsForCall)
}

func (fake *Deliverer) DeliverCalls(stub func(*common.Envelope, blocks.DeliverCallback) error) {
	fake.deliverMutex.Lock()
	defer fake.deliverMutex.Unlock()
	fake.DeliverStub = stub
}

func (fake *Deliverer) DeliverArgsForCall(i int) (*common.Envelope, blocks.DeliverCallback) {
	fake.deliverMutex.RLock()
	defer fake.deliverMutex.RUnlock()
	argsForCall := fake.deliverArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Deliverer) DeliverReturns(result1 error) {
	fake.deliverMutex.Lock()
	defer fake.deliverMutex.Unlock()
	fake.DeliverStub = nil
	fake.deliverReturns = struct {
		result1 error
	}{result1}
}

func (fake *Deliverer) DeliverReturnsOnCall(i int, result1 error) {
	fake.deliverMutex.Lock()
	defer fake.deliverMutex.Unlock()
	fake.DeliverStub = nil
	if fake.deliverReturnsOnCall == nil {
		fake.deliverReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deliverReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Deliverer) Host() string {
	fake.hostMutex.Lock()
	ret, specificReturn := fake.hostReturnsOnCall[len(fake.hostArgsForCall)]
	fake.hostArgsForCall = append(fake.hostArgsForCall, struct {
	}{})
	fake.recordInvocation("Host", []interface{}{})
	fake.hostMutex.Unlock()
	if fake.HostStub != nil {
		return fake.HostStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.hostReturns
	return fakeReturns.result1
}

func (fake *Deliverer) HostCallCount() int {
	fake.hostMutex.RLock()
	defer fake.hostMutex.RUnlock()
	return len(fake.hostArgsForCall)
}

func (fake *Deliverer) HostCalls(stub func() string) {
	fake.hostMutex.Lock()
	defer fake.hostMutex.Unlock()
	fake.HostStub = stub
}

func (fake *Deliverer) HostReturns(result1 string) {
	fake.hostMutex.Lock()
	defer fake.hostMutex.Unlock()
	fake.HostStub = nil
	fake.hostReturns = struct {
		result1 string
	}{result1}
}

func (fake *Deliverer) HostReturnsOnCall(i int, result1 string) {
	fake.hostMutex.Lock()
	defer fake.hostMutex.Unlock()
	fake.HostStub = nil
	if fake.hostReturnsOnCall == nil {
		fake.hostReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.hostReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *Deliverer) Hostname() string {
	fake.hostnameMutex.Lock()
	ret, specificReturn := fake.hostnameReturnsOnCall[len(fake.hostnameArgsForCall)]
	fake.hostnameArgsForCall = append(fake.hostnameArgsForCall, struct {
	}{})
	fake.recordInvocation("Hostname", []interface{}{})
	fake.hostnameMutex.Unlock()
	if fake.HostnameStub != nil {
		return fake.HostnameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.hostnameReturns
	return fakeReturns.result1
}

func (fake *Deliverer) HostnameCallCount() int {
	fake.hostnameMutex.RLock()
	defer fake.hostnameMutex.RUnlock()
	return len(fake.hostnameArgsForCall)
}

func (fake *Deliverer) HostnameCalls(stub func() string) {
	fake.hostnameMutex.Lock()
	defer fake.hostnameMutex.Unlock()
	fake.HostnameStub = stub
}

func (fake *Deliverer) HostnameReturns(result1 string) {
	fake.hostnameMutex.Lock()
	defer fake.hostnameMutex.Unlock()
	fake.HostnameStub = nil
	fake.hostnameReturns = struct {
		result1 string
	}{result1}
}

func (fake *Deliverer) HostnameReturnsOnCall(i int, result1 string) {
	fake.hostnameMutex.Lock()
	defer fake.hostnameMutex.Unlock()
	fake.HostnameStub = nil
	if fake.hostnameReturnsOnCall == nil {
		fake.hostnameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.hostnameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *Deliverer) Port() int32 {
	fake.portMutex.Lock()
	ret, specificReturn := fake.portReturnsOnCall[len(fake.portArgsForCall)]
	fake.portArgsForCall = append(fake.portArgsForCall, struct {
	}{})
	fake.recordInvocation("Port", []interface{}{})
	fake.portMutex.Unlock()
	if fake.PortStub != nil {
		return fake.PortStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.portReturns
	return fakeReturns.result1
}

func (fake *Deliverer) PortCallCount() int {
	fake.portMutex.RLock()
	defer fake.portMutex.RUnlock()
	return len(fake.portArgsForCall)
}

func (fake *Deliverer) PortCalls(stub func() int32) {
	fake.portMutex.Lock()
	defer fake.portMutex.Unlock()
	fake.PortStub = stub
}

func (fake *Deliverer) PortReturns(result1 int32) {
	fake.portMutex.Lock()
	defer fake.portMutex.Unlock()
	fake.PortStub = nil
	fake.portReturns = struct {
		result1 int32
	}{result1}
}

func (fake *Deliverer) PortReturnsOnCall(i int, result1 int32) {
	fake.portMutex.Lock()
	defer fake.portMutex.Unlock()
	fake.PortStub = nil
	if fake.portReturnsOnCall == nil {
		fake.portReturnsOnCall = make(map[int]struct {
			result1 int32
		})
	}
	fake.portReturnsOnCall[i] = struct {
		result1 int32
	}{result1}
}

func (fake *Deliverer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	fake.connectedMutex.RLock()
	defer fake.connectedMutex.RUnlock()
	fake.connectionIdentityMutex.RLock()
	defer fake.connectionIdentityMutex.RUnlock()
	fake.connectionMSPIDMutex.RLock()
	defer fake.connectionMSPIDMutex.RUnlock()
	fake.deliverMutex.RLock()
	defer fake.deliverMutex.RUnlock()
	fake.hostMutex.RLock()
	defer fake.hostMutex.RUnlock()
	fake.hostnameMutex.RLock()
	defer fake.hostnameMutex.RUnlock()
	fake.portMutex.RLock()
	defer fake.portMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Deliverer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ blocks.Deliverer = new(Deliverer)
